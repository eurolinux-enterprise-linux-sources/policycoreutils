diff -up policycoreutils-2.0.83/semanage/seobject.py.auditpwd policycoreutils-2.0.83/semanage/seobject.py
--- policycoreutils-2.0.83/semanage/seobject.py.auditpwd	2012-01-25 17:13:29.727847997 -0500
+++ policycoreutils-2.0.83/semanage/seobject.py	2012-01-27 14:54:58.489652532 -0500
@@ -1,5 +1,5 @@
-#! /usr/bin/python -E
-# Copyright (C) 2005, 2006, 2007, 2008, 2009 Red Hat 
+#! /usr/bin/python -Es
+# Copyright (C) 2005-2011 Red Hat 
 # see file 'COPYING' for use and warranty information
 #
 # semanage is a tool for managing SELinux configuration files
@@ -59,32 +59,67 @@ try:
 	class logger:
 		def __init__(self):
 			self.audit_fd = audit.audit_open()
-
-		def log(self, success, msg, name = "", sename = "", serole = "", serange = "", old_sename = "", old_serole = "", old_serange = ""):
-			audit.audit_log_semanage_message(self.audit_fd, audit.AUDIT_USER_ROLE_CHANGE, sys.argv[0], str(msg), name, 0, sename, serole, serange, old_sename, old_serole, old_serange, "", "", "", success);
+			self.log_list = []
+		def log(self, msg, name = "", sename = "", serole = "", serange = "", oldsename = "", oldserole = "", oldserange = ""):
+			
+			sep = "-"
+			if sename != oldsename:
+				msg += sep + "sename"; sep = ","
+			if serole != oldserole:
+				msg += sep + "role"; sep = ","
+			if serange != oldserange:
+				msg += sep + "range"; sep = ","
+
+			self.log_list.append([self.audit_fd, audit.AUDIT_ROLE_ASSIGN, sys.argv[0], str(msg), name, 0, sename, serole, serange, oldsename, oldserole, oldserange, "", "", ""])
+
+		def log_remove(self, msg, name = "", sename = "", serole = "", serange = "", oldsename = "", oldserole = "", oldserange = ""):
+			self.log_list.append([self.audit_fd, audit.AUDIT_ROLE_REMOVE, sys.argv[0], str(msg), name, 0, sename, serole, serange, oldsename, oldserole, oldserange, "", "", ""])
+
+		def commit(self,success):
+			for l in self.log_list:
+				audit.audit_log_semanage_message(*(l + [success]))
+			self.log_list = []
 except:
 	class logger:
-		def log(self, success, msg, name = "", sename = "", serole = "", serange = "", old_sename = "", old_serole = "", old_serange = ""):
-			if success == 1:
-				message = "Successful: "
-			else:
-				message = "Failed: "
+		def __init__(self):
+			self.log_list=[]
+
+		def log(self, msg, name = "", sename = "", serole = "", serange = "", oldsename = "", oldserole = "", oldserange = ""):
 			message += " %s name=%s" % (msg, name)
 			if sename != "":
 				message += " sename=" + sename
-			if old_sename != "":
-				message += " old_sename=" + old_sename
+			if oldsename != "":
+				message += " oldsename=" + oldsename
 			if serole != "":
 				message += " role=" + serole
-			if old_serole != "":
-				message += " old_role=" + old_serole
+			if oldserole != "":
+				message += " old_role=" + oldserole
 			if serange != "" and serange != None:
 				message += " MLSRange=" + serange
-			if old_serange != "" and old_serange != None:
-				message += " old_MLSRange=" + old_serange
-			syslog.syslog(message);
-			
-mylog = logger()		
+			if oldserange != "" and oldserange != None:
+				message += " old_MLSRange=" + oldserange
+			self.log_list.append(message)
+
+		def log_remove(self, msg, name = "", sename = "", serole = "", serange = "", oldsename = "", oldserole = "", oldserange = ""):
+			self.log(msg, name, sename, serole, serange, oldsename, oldserole, oldserange)
+
+		def commit(self,success):
+			if success == 1:
+				message = "Successful: "
+			else:
+				message = "Failed: "
+			for l in self.log_list:
+				syslog.syslog(syslog.LOG_INFO, message + l)
+
+class nulllogger:
+	def log(self, msg, name = "", sename = "", serole = "", serange = "", oldsename = "", oldserole = "", oldserange = ""):
+		pass
+
+	def log_remove(self, msg, name = "", sename = "", serole = "", serange = "", oldsename = "", oldserole = "", oldserange = ""):
+		pass
+
+	def commit(self,success):
+		pass
 
 import xml.etree.ElementTree
 
@@ -163,48 +198,53 @@ def untranslate(trans, prepend = 1):
 class semanageRecords:
         transaction = False
         handle = None
-	store = None
-
+        store = None
         def __init__(self, store):
                global handle
-                      
+
                self.sh = self.get_handle(store)
 
+	       rc, localstore = selinux.selinux_getpolicytype()
+	       if store == "" or store == localstore:
+		       self.mylog = logger()	
+	       else:
+		       self.mylog = nulllogger()	
+
         def get_handle(self, store):
-               global is_mls_enabled
+		global is_mls_enabled
 
-               if semanageRecords.handle:
-                      return semanageRecords.handle
+		if semanageRecords.handle:
+			return semanageRecords.handle
 
-               handle = semanage_handle_create()
-               if not handle:
-                      raise ValueError(_("Could not create semanage handle"))
-               
-               if not semanageRecords.transaction and store != "":
-                      semanage_select_store(handle, store, SEMANAGE_CON_DIRECT);
-		      semanageRecords.store = store
-                      
-               if not semanage_is_managed(handle):
-                      semanage_handle_destroy(handle)
-                      raise ValueError(_("SELinux policy is not managed or store cannot be accessed."))
-                      
-               rc = semanage_access_check(handle)
-               if rc < SEMANAGE_CAN_READ:
-                      semanage_handle_destroy(handle)
-                      raise ValueError(_("Cannot read policy store."))
-               
-               rc = semanage_connect(handle)
-               if rc < 0:
-                      semanage_handle_destroy(handle)
-                      raise ValueError(_("Could not establish semanage connection"))
+		handle = semanage_handle_create()
+		if not handle:
+			raise ValueError(_("Could not create semanage handle"))
+
+		if not semanageRecords.transaction and store != "":
+			semanage_select_store(handle, store, SEMANAGE_CON_DIRECT);
+			semanageRecords.store = store
+
+		if not semanage_is_managed(handle):
+			semanage_handle_destroy(handle)
+			raise ValueError(_("SELinux policy is not managed or store cannot be accessed."))
+
+		rc = semanage_access_check(handle)
+		if rc < SEMANAGE_CAN_READ:
+			semanage_handle_destroy(handle)
+			raise ValueError(_("Cannot read policy store."))
+
+		rc = semanage_connect(handle)
+		if rc < 0:
+			semanage_handle_destroy(handle)
+			raise ValueError(_("Could not establish semanage connection"))
 
-               is_mls_enabled = semanage_mls_enabled(handle)
-               if is_mls_enabled < 0:
-                      semanage_handle_destroy(handle)
-                      raise ValueError(_("Could not test MLS enabled status"))
+		is_mls_enabled = semanage_mls_enabled(handle)
+		if is_mls_enabled < 0:
+			semanage_handle_destroy(handle)
+			raise ValueError(_("Could not test MLS enabled status"))
 
-               semanageRecords.handle = handle
-               return semanageRecords.handle
+		semanageRecords.handle = handle
+		return semanageRecords.handle
 
         def deleteall(self):
                raise ValueError(_("Not yet implemented"))
@@ -214,6 +254,7 @@ class semanageRecords:
                       raise ValueError(_("Semanage transaction already in progress"))
                self.begin()
                semanageRecords.transaction = True
+
         def begin(self):
                if semanageRecords.transaction:
                       return
@@ -224,11 +265,13 @@ class semanageRecords:
                raise ValueError(_("Not yet implemented"))
 
         def commit(self):
-               if semanageRecords.transaction:
-                      return
-               rc = semanage_commit(self.sh) 
-               if rc < 0:
-                      raise ValueError(_("Could not commit semanage transaction"))
+		if semanageRecords.transaction:
+			return
+		rc = semanage_commit(self.sh) 
+		if rc < 0:
+			self.mylog.commit(0)
+			raise ValueError(_("Could not commit semanage transaction"))
+		self.mylog.commit(1)
 
         def finish(self):
                if not semanageRecords.transaction:
@@ -252,9 +295,13 @@ class moduleRecords(semanageRecords):
                return l
 
 	def list(self, heading = 1, locallist = 0):
+		all = self.get_all()
+		if len(all) == 0:
+			return 
+
 		if heading:
 			print "\n%-25s%-10s\n" % (_("Modules Name"), _("Version"))
-                for t in self.get_all():
+                for t in all:
                        if t[2] == 0:
                               disabled = _("Disabled")
                        else:
@@ -267,24 +314,24 @@ class moduleRecords(semanageRecords):
                       self.commit()
 
 	def disable(self, module):
-               need_commit = False                      
+               need_commit = False
                for m in module.split():
                       rc = semanage_module_disable(self.sh, m)
                       if rc < 0 and rc != -3:
                              raise ValueError(_("Could not disable module %s (remove failed)") % m)
                       if rc != -3:
-                             need_commit = True 
+                             need_commit = True
                if need_commit:
                       self.commit()
-			
+
 	def enable(self, module):
-               need_commit = False                      
+               need_commit = False
                for m in module.split():
                       rc = semanage_module_enable(self.sh, m)
                       if rc < 0 and rc != -3:
                              raise ValueError(_("Could not enable module %s (remove failed)") % m)
                       if rc != -3:
-                             need_commit = True 
+                             need_commit = True
                if need_commit:
                       self.commit()
 
@@ -298,14 +345,8 @@ class moduleRecords(semanageRecords):
                       rc = semanage_module_remove(self.sh, m)
                       if rc < 0 and rc != -2:
                              raise ValueError(_("Could not remove module %s (remove failed)") % m)
-                      
+
                self.commit()
-			
-	def deleteall(self):
-               l = self.get_all()
-               if len(l) > 0:
-                      all = " ".join(l[0])
-                      self.delete(all)
 
 class dontauditClass(semanageRecords):
 	def __init__(self, store):
@@ -333,12 +374,13 @@ class permissiveRecords(semanageRecords)
                       name = semanage_module_get_name(mod)
                       if name and name.startswith("permissive_"):
                              l.append(name.split("permissive_")[1])
-
                return l
 
 	def list(self, heading = 1, locallist = 0):
 		import setools
 		all = map(lambda y: y["name"], filter(lambda x: x["permissive"], setools.seinfo(setools.TYPE)))
+		if len(all) == 0:
+			return 
 
 		if heading:
 			print "\n%-25s\n" % (_("Builtin Permissive Types"))
@@ -346,6 +388,10 @@ class permissiveRecords(semanageRecords)
                 for t in all:
 			if t not in customized:
 				print t
+
+		if len(customized) == 0:
+			return 
+
 		if heading:
 			print "\n%-25s\n" % (_("Customized Permissive Types"))
 		for t in customized:
@@ -407,17 +453,26 @@ permissive %s;
 class loginRecords(semanageRecords):
 	def __init__(self, store = ""):
 		semanageRecords.__init__(self, store)
+		self.oldsename  = None
+		self.oldserange = None
+		self.sename  = None
+		self.serange = None
 
 	def __add(self, name, sename, serange):
-		if is_mls_enabled == 1:
-			if serange == "":
-				serange = "s0"
-			else:
-				serange = untranslate(serange)
-			
+		rec, self.oldsename, self.oldserange = selinux.getseuserbyname(name)
 		if sename == "":
 			sename = "user_u"
 			
+		userrec = seluserRecords()
+		range, (rc, oldserole) = userrec.get(self.oldsename)
+		range, (rc, serole) = userrec.get(sename)
+
+		if is_mls_enabled == 1:
+			if serange != "":
+				serange = untranslate(serange)
+			else:
+                           serange = range
+			
 		(rc, k) = semanage_seuser_key_create(self.sh, name)
 		if rc < 0:
 			raise ValueError(_("Could not create a key for %s") % name)
@@ -463,113 +518,132 @@ class loginRecords(semanageRecords):
 
 		semanage_seuser_key_free(k)
 		semanage_seuser_free(u)
+		self.mylog.log("login", name, sename=sename, serange=serange, serole=",".join(serole), oldserole=",".join(oldserole), oldsename=self.oldsename, oldserange=self.oldserange);
 
 	def add(self, name, sename, serange):
 		try:
-                        self.begin()
-                        self.__add(name, sename, serange)
-                        self.commit()
-
+			self.begin()
+			self.__add(name, sename, serange)
+			self.commit()
 		except ValueError, error:
-			mylog.log(0, _("add SELinux user mapping"), name, sename, "", serange);
+			self.mylog.commit(0)
 			raise error
-		
-		mylog.log(1, _("add SELinux user mapping"), name, sename, "", serange);
 
 	def __modify(self, name, sename = "", serange = ""):
-               if sename == "" and serange == "":
+		rec, self.oldsename, self.oldserange = selinux.getseuserbyname(name)
+		if sename == "" and serange == "":
                       raise ValueError(_("Requires seuser or serange"))
 
-               (rc, k) = semanage_seuser_key_create(self.sh, name)
-               if rc < 0:
-                      raise ValueError(_("Could not create a key for %s") % name)
-
-               (rc, exists) = semanage_seuser_exists(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not check if login mapping for %s is defined") % name)
-               if not exists:
-                      raise ValueError(_("Login mapping for %s is not defined") % name)
+		userrec = seluserRecords()
+		range, (rc, oldserole) = userrec.get(self.oldsename)
 
-               (rc, u) = semanage_seuser_query(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not query seuser for %s") % name)
+		if sename != "":
+			range, (rc, serole) = userrec.get(sename)
+		else:
+			serole=oldserole
 
-               oldserange = semanage_seuser_get_mlsrange(u)
-               oldsename = semanage_seuser_get_sename(u)
-               if serange != "":
-                      semanage_seuser_set_mlsrange(self.sh, u, untranslate(serange))
-               else:
-                      serange = oldserange
+		if serange != "":
+			self.serange=serange
+		else:
+			self.serange=range
 
-               if sename != "":
-                      semanage_seuser_set_sename(self.sh, u, sename)
-               else:
-                      sename = oldsename
+		(rc, k) = semanage_seuser_key_create(self.sh, name)
+		if rc < 0:
+		       raise ValueError(_("Could not create a key for %s") % name)
 
-               rc = semanage_seuser_modify_local(self.sh, k, u)
-               if rc < 0:
-                      raise ValueError(_("Could not modify login mapping for %s") % name)
+		(rc, exists) = semanage_seuser_exists(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not check if login mapping for %s is defined") % name)
+		if not exists:
+			raise ValueError(_("Login mapping for %s is not defined") % name)
+		
+		(rc, u) = semanage_seuser_query(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not query seuser for %s") % name)
+		
+		self.oldserange = semanage_seuser_get_mlsrange(u)
+		self.oldsename = semanage_seuser_get_sename(u)
+		if serange != "":
+			semanage_seuser_set_mlsrange(self.sh, u, untranslate(serange))
 
-               semanage_seuser_key_free(k)
-               semanage_seuser_free(u)
+		if sename != "":
+			semanage_seuser_set_sename(self.sh, u, sename)
+		else:
+			self.sename = self.oldsename
+			
+		rc = semanage_seuser_modify_local(self.sh, k, u)
+		if rc < 0:
+			raise ValueError(_("Could not modify login mapping for %s") % name)
 
-               mylog.log(1, "modify selinux user mapping", name, sename, "", serange, oldsename, "", oldserange);
+		semanage_seuser_key_free(k)
+		semanage_seuser_free(u)
+		self.mylog.log("login", name,sename=self.sename,serange=self.serange, serole=",".join(serole), oldserole=",".join(oldserole), oldsename=self.oldsename, oldserange=self.oldserange);
 
 	def modify(self, name, sename = "", serange = ""):
 		try:
                         self.begin()
                         self.__modify(name, sename, serange)
                         self.commit()
-
 		except ValueError, error:
-			mylog.log(0, "modify selinux user mapping", name, sename, "", serange, "", "", "");
+			self.mylog.commit(0)
 			raise error
-		
+
 	def __delete(self, name):
-               (rc, k) = semanage_seuser_key_create(self.sh, name)
-               if rc < 0:
-                      raise ValueError(_("Could not create a key for %s") % name)
+		rec, self.oldsename, self.oldserange = selinux.getseuserbyname(name)
+		userrec = seluserRecords()
+		range, (rc, oldserole) = userrec.get(self.oldsename)
 
-               (rc, exists) = semanage_seuser_exists(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not check if login mapping for %s is defined") % name)
-               if not exists:
-                      raise ValueError(_("Login mapping for %s is not defined") % name)
+		(rc, k) = semanage_seuser_key_create(self.sh, name)
+		if rc < 0:
+			raise ValueError(_("Could not create a key for %s") % name)
 
-               (rc, exists) = semanage_seuser_exists_local(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not check if login mapping for %s is defined") % name)
-               if not exists:
-                      raise ValueError(_("Login mapping for %s is defined in policy, cannot be deleted") % name)
+		(rc, exists) = semanage_seuser_exists(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not check if login mapping for %s is defined") % name)
+		if not exists:
+			raise ValueError(_("Login mapping for %s is not defined") % name)
+		
+		(rc, exists) = semanage_seuser_exists_local(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not check if login mapping for %s is defined") % name)
+		if not exists:
+			raise ValueError(_("Login mapping for %s is defined in policy, cannot be deleted") % name)
+		
+		rc = semanage_seuser_del_local(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not delete login mapping for %s") % name)
+		
+		semanage_seuser_key_free(k)
 
-               rc = semanage_seuser_del_local(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not delete login mapping for %s") % name)
+		rec, self.sename, self.serange = selinux.getseuserbyname("__default__")
+		range, (rc, serole) = userrec.get(self.sename)
 
-               semanage_seuser_key_free(k)
+		self.mylog.log_remove("login", name, sename=self.sename, serange=self.serange, serole=",".join(serole), oldserole=",".join(oldserole), oldsename=self.oldsename, oldserange=self.oldserange);
 
 	def delete(self, name):
 		try:
-                       self.begin()
-                       self.__delete(name)
-                       self.commit()
+			self.begin()
+			self.__delete(name)
+			self.commit()
 
 		except ValueError, error:
-			mylog.log(0, "delete SELinux user mapping", name);
+			self.mylog.commit(0)
 			raise error
 		
-		mylog.log(1, "delete SELinux user mapping", name);
-
 	def deleteall(self):
 		(rc, ulist) = semanage_seuser_list_local(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not list login mappings"))
 
-                self.begin()
-		for u in ulist:
-			self.__delete(semanage_seuser_get_name(u))
-                self.commit()
-
+		try:
+			self.begin()
+			for u in ulist:
+				self.__delete(semanage_seuser_get_name(u))
+			self.commit()
+		except ValueError, error:
+			self.mylog.commit(0)
+			raise error
+		
 	def get_all(self, locallist = 0):
 		ddict = {}
                 if locallist:
@@ -596,7 +670,10 @@ class loginRecords(semanageRecords):
 	def list(self,heading = 1, locallist = 0):
 		ddict = self.get_all(locallist)
 		keys = ddict.keys()
+		if len(keys) == 0:
+			return 
 		keys.sort()
+
 		if is_mls_enabled == 1:
 			if heading:
 				print "\n%-25s %-25s %-25s\n" % (_("Login Name"), _("SELinux User"), _("MLS/MCS Range"))
@@ -612,6 +689,22 @@ class seluserRecords(semanageRecords):
 	def __init__(self, store = ""):
 		semanageRecords.__init__(self, store)
 
+	def get(self, name):
+                (rc, k) = semanage_user_key_create(self.sh, name)
+                if rc < 0:
+                       raise ValueError(_("Could not create a key for %s") % name)
+                (rc, exists) = semanage_user_exists(self.sh, k)
+                if rc < 0:
+                       raise ValueError(_("Could not check if SELinux user %s is defined") % name)
+                (rc, u) = semanage_user_query(self.sh, k)
+                if rc < 0:
+                       raise ValueError(_("Could not query user for %s") % name)
+                serange = semanage_user_get_mlsrange(u)
+                serole = semanage_user_get_roles(self.sh,u)
+		semanage_user_key_free(k)
+		semanage_user_free(u)
+		return serange, serole
+                
 	def __add(self, name, roles, selevel, serange, prefix):
 		if is_mls_enabled == 1:
 			if serange == "":
@@ -672,21 +765,20 @@ class seluserRecords(semanageRecords):
 
                 semanage_user_key_free(k)
                 semanage_user_free(u)
+		self.mylog.log("seuser", sename=name, serole=",".join(roles), serange=serange)
 
 	def add(self, name, roles, selevel, serange, prefix):
-		seroles = " ".join(roles)
-                try:
-                       self.begin()
-                       self.__add( name, roles, selevel, serange, prefix)
-                       self.commit()
+		serole = " ".join(roles)
+		try:
+			self.begin()
+			self.__add( name, roles, selevel, serange, prefix)
+			self.commit()
 		except ValueError, error:
-			mylog.log(0,"add SELinux user record", name, name, seroles, serange)
+			self.mylog.commit(0)
 			raise error
-		
-		mylog.log(1,"add SELinux user record", name, name, seroles, serange)
 
         def __modify(self, name, roles = [], selevel = "", serange = "", prefix = ""):
-		oldroles = ""
+		oldserole = ""
 		oldserange = ""
 		newroles = string.join(roles, ' ');
                 if prefix == "" and len(roles) == 0  and serange == "" and selevel == "":
@@ -712,9 +804,7 @@ class seluserRecords(semanageRecords):
                 oldserange = semanage_user_get_mlsrange(u)
                 (rc, rlist) = semanage_user_get_roles(self.sh, u)
                 if rc >= 0:
-                       oldroles = string.join(rlist, ' ');
-                       newroles = newroles + ' ' + oldroles;
-
+                       oldserole = string.join(rlist, ' ');
 
                 if serange != "":
                        semanage_user_set_mlsrange(self.sh, u, untranslate(serange))
@@ -738,8 +828,10 @@ class seluserRecords(semanageRecords):
 
 		semanage_user_key_free(k)
 		semanage_user_free(u)
-		
-		mylog.log(1,"modify SELinux user record", name, "", newroles, serange, "", oldroles, oldserange)
+	
+		role=",".join(newroles.split())
+		oldserole=",".join(oldserole.split())
+		self.mylog.log("seuser", sename=name, oldsename=name, serole=role, serange=serange, oldserole=oldserole, oldserange=oldserange)
 
 
 	def modify(self, name, roles = [], selevel = "", serange = "", prefix = ""):
@@ -747,9 +839,8 @@ class seluserRecords(semanageRecords):
                         self.begin()
                         self.__modify(name, roles, selevel, serange, prefix)
                         self.commit()
-
 		except ValueError, error:
-			mylog.log(0,"modify SELinux user record", name, "", " ".join(roles), serange, "", "", "")
+			self.mylog.commit(0)
 			raise error
 
 	def __delete(self, name):
@@ -769,11 +860,21 @@ class seluserRecords(semanageRecords):
                if not exists:
                       raise ValueError(_("SELinux user %s is defined in policy, cannot be deleted") % name)
 			
+	       (rc, u) = semanage_user_query(self.sh, k)
+	       if rc < 0:
+                       raise ValueError(_("Could not query user for %s") % name)
+	       oldserange = semanage_user_get_mlsrange(u)
+	       (rc, rlist) = semanage_user_get_roles(self.sh, u)
+	       oldserole = ",".join(rlist)
+
                rc = semanage_user_del_local(self.sh, k)
                if rc < 0:
                       raise ValueError(_("Could not delete SELinux user %s") % name)
 
                semanage_user_key_free(k)		
+	       semanage_user_free(u)
+
+	       self.mylog.log_remove("seuser", oldsename=name, oldserange=oldserange, oldserole=oldserole)
 
 	def delete(self, name):
 		try:
@@ -782,20 +883,22 @@ class seluserRecords(semanageRecords):
                         self.commit()
 
 		except ValueError, error:
-			mylog.log(0,"delete SELinux user record", name)
+			self.mylog.commit(0)
 			raise error
 		
-		mylog.log(1,"delete SELinux user record", name)
-
 	def deleteall(self):
 		(rc, ulist) = semanage_user_list_local(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not list login mappings"))
 
-                self.begin()
-		for u in ulist:
-			self.__delete(semanage_user_get_name(u))
-                self.commit()
+		try:
+			self.begin()
+			for u in ulist:
+				self.__delete(semanage_user_get_name(u))
+			self.commit()
+		except ValueError, error:
+			self.mylog.commit(0)
+			raise error
 
 	def get_all(self, locallist = 0):
 		ddict = {}
@@ -829,7 +932,10 @@ class seluserRecords(semanageRecords):
 	def list(self, heading = 1, locallist = 0):
 		ddict = self.get_all(locallist)
 		keys = ddict.keys()
+		if len(keys) == 0:
+			return 
 		keys.sort()
+
 		if is_mls_enabled == 1:
 			if heading:
 				print "\n%-15s %-10s %-10s %-30s" % ("", _("Labeling"), _("MLS/"), _("MLS/"))
@@ -864,8 +970,8 @@ class portRecords(semanageRecords):
 			low = int(ports[0])
 			high = int(ports[1])
 
-                if high > 65536:
-                       raise ValueError(_("Invalid Port"))
+		if high > 65535:
+			raise ValueError(_("Invalid Port"))
 
 		(rc, k) = semanage_port_key_create(self.sh, low, high, proto_d)
 		if rc < 0:
@@ -873,7 +979,6 @@ class portRecords(semanageRecords):
 		return ( k, proto_d, low, high )
 
 	def __add(self, port, proto, serange, type):
-
 		if is_mls_enabled == 1:
 			if serange == "":
 				serange = "s0"
@@ -936,7 +1041,6 @@ class portRecords(semanageRecords):
                 self.commit()
 
 	def __modify(self, port, proto, serange, setype):
-
 		if serange == "" and setype == "":
 			if is_mls_enabled == 1:
 				raise ValueError(_("Requires setype or serange"))
@@ -1084,11 +1188,14 @@ class portRecords(semanageRecords):
                 return l
 
 	def list(self, heading = 1, locallist = 0):
-		if heading:
-			print "%-30s %-8s %s\n" % (_("SELinux Port Type"), _("Proto"), _("Port Number"))
 		ddict = self.get_all_by_type(locallist)
 		keys = ddict.keys()
+		if len(keys) == 0:
+			return 
 		keys.sort()
+
+		if heading:
+			print "%-30s %-8s %s\n" % (_("SELinux Port Type"), _("Proto"), _("Port Number"))
 		for i in keys:
 			rec = "%-30s %-8s " % i
 			rec += "%s" % ddict[i][0]
@@ -1146,7 +1253,7 @@ class nodeRecords(semanageRecords):
                rc = semanage_node_set_mask(self.sh, node, proto, mask)
                if rc < 0:
                        raise ValueError(_("Could not set mask for %s") % addr)
-	       
+
                rc = semanage_context_set_user(self.sh, con, "system_u")
                if rc < 0:
                        raise ValueError(_("Could not set user in addr context for %s") % addr)
@@ -1270,7 +1377,7 @@ class nodeRecords(semanageRecords):
               (rc, nlist) = semanage_node_list_local(self.sh)
               if rc < 0:
                      raise ValueError(_("Could not deleteall node mappings"))
-              
+
               self.begin()
               for node in nlist:
                      self.__delete(semanage_node_get_addr(self.sh, node)[1], semanage_node_get_mask(self.sh, node)[1], self.protocol[semanage_node_get_proto(node)])
@@ -1304,11 +1411,14 @@ class nodeRecords(semanageRecords):
                return l
 
        def list(self, heading = 1, locallist = 0):
-               if heading:
-                       print "%-18s %-18s %-5s %-5s\n" % ("IP Address", "Netmask", "Protocol", "Context")
                ddict = self.get_all(locallist)
                keys = ddict.keys()
+	       if len(keys) == 0:
+		       return 
                keys.sort()
+
+               if heading:
+                       print "%-18s %-18s %-5s %-5s\n" % ("IP Address", "Netmask", "Protocol", "Context")
                if is_mls_enabled:
 			for k in keys:
 				val = ''
@@ -1492,11 +1602,14 @@ class interfaceRecords(semanageRecords):
                 return l
 
 	def list(self, heading = 1, locallist = 0):
-		if heading:
-			print "%-30s %s\n" % (_("SELinux Interface"), _("Context"))
 		ddict = self.get_all(locallist)
 		keys = ddict.keys()
+		if len(keys) == 0:
+			return 
 		keys.sort()
+
+		if heading:
+			print "%-30s %s\n" % (_("SELinux Interface"), _("Context"))
 		if is_mls_enabled:
 			for k in keys:
 				print "%-30s %s:%s:%s:%s " % (k,ddict[k][0], ddict[k][1],ddict[k][2], translate(ddict[k][3], False))
@@ -1508,12 +1621,21 @@ class fcontextRecords(semanageRecords):
 	def __init__(self, store = ""):
 		semanageRecords.__init__(self, store)
                 self.equiv = {}
+                self.equiv_dist = {}
                 self.equal_ind = False
                 try:
                        fd = open(selinux.selinux_file_context_subs_path(), "r")
                        for i in fd.readlines():
-                              src, dst = i.split()
-                              self.equiv[src] = dst
+                              target, substitute = i.split()
+                              self.equiv[target] = substitute
+                       fd.close()
+                except IOError:
+                       pass
+                try:
+                       fd = open(selinux.selinux_file_context_subs_dist_path(), "r")
+                       for i in fd.readlines():
+                              target, substitute = i.split()
+                              self.equiv_dist[target] = substitute
                        fd.close()
                 except IOError:
                        pass
@@ -1523,8 +1645,8 @@ class fcontextRecords(semanageRecords):
                        subs_file = selinux.selinux_file_context_subs_path()
                        tmpfile = "%s.tmp" % subs_file
                        fd = open(tmpfile, "w")
-                       for src in self.equiv.keys():
-                              fd.write("%s %s\n" % (src, self.equiv[src]))
+                       for target in self.equiv.keys():
+                              fd.write("%s %s\n" % (target, self.equiv[target]))
                        fd.close()
                        try:
                               os.chmod(tmpfile, os.stat(subs_file)[stat.ST_MODE])
@@ -1534,19 +1656,26 @@ class fcontextRecords(semanageRecords):
                        self.equal_ind = False
 		semanageRecords.commit(self)
 
-        def add_equal(self, src, dst):
+        def add_equal(self, target, substitute):
                 self.begin()
-                if src in self.equiv.keys():
-                       raise ValueError(_("Equivalence class for %s already exists") % src)
-                self.equiv[src] = dst
+                if target in self.equiv.keys():
+                       raise ValueError(_("Equivalence class for %s already exists") % target)
+                self.validate(target)
+
+		for fdict in (self.equiv, self.equiv_dist):
+			for i in fdict:
+				if i.startswith(target + "/"):
+					raise ValueError(_("File spec %s conflicts with equivalency rule '%s %s'") % (target, i, fdict[i]))
+
+                self.equiv[target] = substitute
                 self.equal_ind = True
                 self.commit()
 
-        def modify_equal(self, src, dst):
+        def modify_equal(self, target, substitute):
                 self.begin()
-                if src not in self.equiv.keys():
-                       raise ValueError(_("Equivalence class for %s does not exists") % src)
-                self.equiv[src] = dst
+                if target not in self.equiv.keys():
+                       raise ValueError(_("Equivalence class for %s does not exists") % target)
+                self.equiv[target] = substitute
                 self.equal_ind = True
                 self.commit()
 
@@ -1571,13 +1700,19 @@ class fcontextRecords(semanageRecords):
                               raise ValueError(_("Could not set mls fields in file context for %s") % target)
 
                 return con
-               
+
         def validate(self, target):
                if target == "" or target.find("\n") >= 0:
                       raise ValueError(_("Invalid file specification"))
                if target.find(" ") != -1:
                       raise ValueError(_("File specification can not include spaces"))
-                      
+	       for fdict in (self.equiv, self.equiv_dist):
+		       for i in fdict:
+			       if target.startswith(i+"/"):
+				       t = re.sub(i, fdict[i], target)
+				       raise ValueError(_("File spec %s conflicts with equivalency rule '%s %s'; Try adding '%s' instead") % (target, i, fdict[i], t))
+
+
 	def __add(self, target, type, ftype = "", serange = "", seuser = "system_u"):
                 self.validate(target)
 
@@ -1696,7 +1831,6 @@ class fcontextRecords(semanageRecords):
                 self.begin()
                 self.__modify(target, setype, ftype, serange, seuser)
                 self.commit()
-		
 
 	def deleteall(self):
 		(rc, flist) = semanage_fcontext_list_local(self.sh)
@@ -1795,23 +1929,31 @@ class fcontextRecords(semanageRecords):
 	def list(self, heading = 1, locallist = 0 ):
 		fcon_dict = self.get_all(locallist)
                 keys = fcon_dict.keys()
-                keys.sort()
-                if len(keys) > 0 and heading:
-			print "%-50s %-18s %s\n" % (_("SELinux fcontext"), _("type"), _("Context"))
-		for k in keys:
-			if fcon_dict[k]:
-				if is_mls_enabled:
-					print "%-50s %-18s %s:%s:%s:%s " % (k[0], k[1], fcon_dict[k][0], fcon_dict[k][1], fcon_dict[k][2], translate(fcon_dict[k][3],False))
+		if len(keys) != 0:
+			keys.sort()
+			if heading:
+				print "%-50s %-18s %s\n" % (_("SELinux fcontext"), _("type"), _("Context"))
+			for k in keys:
+				if fcon_dict[k]:
+					if is_mls_enabled:
+						print "%-50s %-18s %s:%s:%s:%s " % (k[0], k[1], fcon_dict[k][0], fcon_dict[k][1], fcon_dict[k][2], translate(fcon_dict[k][3],False))
+					else:
+						print "%-50s %-18s %s:%s:%s " % (k[0], k[1], fcon_dict[k][0], fcon_dict[k][1],fcon_dict[k][2])
 				else:
-					print "%-50s %-18s %s:%s:%s " % (k[0], k[1], fcon_dict[k][0], fcon_dict[k][1],fcon_dict[k][2])
-			else:
-				print "%-50s %-18s <<None>>" % (k[0], k[1])
-                if len(self.equiv.keys()) > 0:
+					print "%-50s %-18s <<None>>" % (k[0], k[1])
+
+		if len(self.equiv_dist):
+		       if not locallist:
+			       if heading:
+				       print _("\nSELinux Distribution fcontext Equivalence \n")
+			       for target in self.equiv_dist.keys():
+				       print "%s = %s" % (target, self.equiv_dist[target])
+		if len(self.equiv):
                        if heading:
-                              print _("\nSELinux fcontext Equivalence \n")
-                       
-                       for src in self.equiv.keys():
-                              print "%s = %s" % (src, self.equiv[src])
+                              print _("\nSELinux Local fcontext Equivalence \n")
+
+                       for target in self.equiv.keys():
+                              print "%s = %s" % (target, self.equiv[target])
 				
 class booleanRecords(semanageRecords):
 	def __init__(self, store = ""):
@@ -1979,11 +2121,13 @@ class booleanRecords(semanageRecords):
                               if ddict[k]:
                                      print "%s=%s" %  (k, ddict[k][2])
                        return
-		if heading:
-			print "%-40s %s\n" % (_("SELinux boolean"), _("Description"))
 		ddict = self.get_all(locallist)
 		keys = ddict.keys()
+		if len(keys) == 0:
+			return 
+
+		if heading:
+			print "%-30s %s  %s %s\n" % (_("SELinux boolean"),_("State"), _("Default"), _("Description"))
 		for k in keys:
 			if ddict[k]:
-				print "%-30s -> %-5s %s" %  (k, on_off[ddict[k][2]], self.get_desc(k))
-
+				print "%-30s (%-5s,%5s)  %s" %  (k, on_off[selinux.security_get_boolean_active(k)], on_off[ddict[k][2]], self.get_desc(k))
